png(file = 'pheatmap.png', width = 24, height = 24, units = "in", res = 300)
pheatmap(iR, display_numbers = TRUE,
fontsize = 8,
fontsize_number = 4,
fontsize_col = 5,
fontsize_row = 5,
main = "Correlation heatmap of 48 osteometric measurements taken from 1538 human skeletons")
dev.off()
png(file = 'pheatmap.png', width = 24, height = 24, units = "in", res = 300)
pheatmap(iR, display_numbers = TRUE,
fontsize = 20,
fontsize_number = 8,
fontsize_col = 10,
fontsize_row = 10,
main = "Correlation heatmap of 48 osteometric measurements taken from 1538 human skeletons")
dev.off()
png(file = 'pheatmap.png', width = 24, height = 24, units = "in", res = 300)
pheatmap(iR, display_numbers = TRUE,
fontsize = 20,
fontsize_number = 10,
fontsize_col = 12,
fontsize_row = 12,
main = "Correlation heatmap of 48 osteometric measurements taken from 1538 human skeletons")
dev.off()
png(file = 'pheatmap.png', width = 24, height = 24, units = "in", res = 300)
pheatmap(iR, display_numbers = TRUE,
fontsize = 25,
fontsize_number = 10,
fontsize_col = 12,
fontsize_row = 12,
main = "Correlation heatmap of 48 osteometric measurements taken from 1538 human skeletons")
dev.off()
# correlation of residuals
# reference: https://towardsdatascience.com/keeping-an-eye-on-confounds-a-walk-through-for-calculating-a-partial-correlation-matrix-2ac6b831c5b6
partialCors <- list()
for (i in 1:length(column_name)) {
y <- column_name[i]
covariatesAll <- column_name[!(column_name %in% y)]
crntPcor <- double()
for (j in 1:length(covariatesAll)) {
covarLeftOut <- covariatesAll[j]
covariatesCrnt <- covariatesAll[!(covariatesAll %in% covarLeftOut)]
# construct lm model
rhs <- paste(covariatesCrnt, collapse = " + ")
lhs <- paste(y, "~")
frmla <- as.formula(paste(lhs, rhs))
# get residuals from linear model of X given Z
R1 <- lm(frmla, data = data)$residual
lhs <- paste(covarLeftOut, "~")
frmla <- as.formula(paste(lhs, rhs))
# get residuals from linear model of Y given Z
R2 <- lm(frmla, data = data)$residual
crntPcor[j] <- cor(R1,R2)
}
partialCors[[i]] <- append(crntPcor, 1 , i-1)
}
partialCorMat <- matrix(unlist(partialCors),
ncol = length(column_name),
nrow = length(column_name),
dimnames = list(column_name, column_name))
iR<-partialCorMat
ns=3
par(mfrow=c(1,1),mar=c(0,1,2,1))
diag(iR)=rep(NA,ns)
image(1:ns,1:ns,iR,col=c("yellow","goldenrod1","pink2"),
breaks=c(0,.25,.5,.75),xlab="",ylab="",axes=F)
axis(side=1,at=1:ns,labels=column_name,font=2)
axis(side=2,at=1:ns,labels=column_name,srt=90,font=2)
axis(side=3,at=1:ns,labels=column_name,font=2)
axis(side=4,at=1:ns,labels=column_name,font=2)
for(i in 1:ns)
text(rep(i,ns),1:ns,round(iR[i,],2),font=2)
# inverse correlation
# based on cimcorSP(job=3)
for(i in 1:ns)
for(j in 1:ns)
iR[i,j]=-iiR[i,j]/sqrt(abs(iiR[i,i]*iiR[j,j]))
diag(iR)=rep(NA,ns)
image(1:ns,1:ns,iR,col=c("cyan","#ff6633","#cc3300"),
breaks=c(0,.25,.5,.75), xlab="",ylab="",axes=F)
axis(side=1,at=1:ns,labels=column_name,font=2)
axis(side=2,at=1:ns,labels=column_name,srt=90,font=2)
axis(side=3,at=1:ns,labels=column_name,font=2)
axis(side=4,at=1:ns,labels=column_name,font=2)
for(i in 1:ns)
text(rep(i,ns),1:ns,round(iR[i,],2),font=2)
# setup
data <- read.csv('truckR.data.csv')
head(data, 2)
# add time variable
data$time = 1:nrow(data)
cor_matrix <- cor(data)
iR=iiR=solve(cor_matrix)
ns = length(data)
column_name = names(data)
# inverse correlation
# based on cimcorSP(job=3)
for(i in 1:ns)
for(j in 1:ns)
iR[i,j]=-iiR[i,j]/sqrt(abs(iiR[i,i]*iiR[j,j]))
diag(iR)=rep(NA,ns)
image(1:ns,1:ns,iR,col=c("cyan","#ff6633","#cc3300"),
breaks=c(0,.25,.5,.75), xlab="",ylab="",axes=F)
axis(side=1,at=1:ns,labels=column_name,font=2)
axis(side=2,at=1:ns,labels=column_name,srt=90,font=2)
axis(side=3,at=1:ns,labels=column_name,font=2)
axis(side=4,at=1:ns,labels=column_name,font=2)
for(i in 1:ns)
text(rep(i,ns),1:ns,round(iR[i,],2),font=2)
# correlation of residuals
# reference: https://towardsdatascience.com/keeping-an-eye-on-confounds-a-walk-through-for-calculating-a-partial-correlation-matrix-2ac6b831c5b6
partialCors <- list()
for (i in 1:length(column_name)) {
y <- column_name[i]
covariatesAll <- column_name[!(column_name %in% y)]
crntPcor <- double()
for (j in 1:length(covariatesAll)) {
covarLeftOut <- covariatesAll[j]
covariatesCrnt <- covariatesAll[!(covariatesAll %in% covarLeftOut)]
# construct lm model
rhs <- paste(covariatesCrnt, collapse = " + ")
lhs <- paste(y, "~")
frmla <- as.formula(paste(lhs, rhs))
# get residuals from linear model of X given Z
R1 <- lm(frmla, data = data)$residual
lhs <- paste(covarLeftOut, "~")
frmla <- as.formula(paste(lhs, rhs))
# get residuals from linear model of Y given Z
R2 <- lm(frmla, data = data)$residual
crntPcor[j] <- cor(R1,R2)
}
partialCors[[i]] <- append(crntPcor, 1 , i-1)
}
partialCorMat <- matrix(unlist(partialCors),
ncol = length(column_name),
nrow = length(column_name),
dimnames = list(column_name, column_name))
iR<-partialCorMat
ns=3
par(mfrow=c(1,1),mar=c(0,1,2,1))
diag(iR)=rep(NA,ns)
image(1:ns,1:ns,iR,col=c("yellow","goldenrod1","pink2"),
breaks=c(0,.25,.5,.75),xlab="",ylab="",axes=F)
axis(side=1,at=1:ns,labels=column_name,font=2)
axis(side=2,at=1:ns,labels=column_name,srt=90,font=2)
axis(side=3,at=1:ns,labels=column_name,font=2)
axis(side=4,at=1:ns,labels=column_name,font=2)
for(i in 1:ns)
text(rep(i,ns),1:ns,round(iR[i,],2),font=2)
partialCorMat <- matrix(unlist(partialCors),
ncol = length(column_name),
nrow = length(column_name),
dimnames = list(column_name, column_name))
iR<-partialCorMat
partialCorMat
# correlation of residuals
# reference: https://towardsdatascience.com/keeping-an-eye-on-confounds-a-walk-through-for-calculating-a-partial-correlation-matrix-2ac6b831c5b6
partialCors <- list()
for (i in 1:length(column_name)) {
y <- column_name[i]
covariatesAll <- column_name[!(column_name %in% y)]
crntPcor <- double()
for (j in 1:length(covariatesAll)) {
covarLeftOut <- covariatesAll[j]
covariatesCrnt <- covariatesAll[!(covariatesAll %in% covarLeftOut)]
# construct lm model
rhs <- paste(covariatesCrnt, collapse = " + ")
lhs <- paste(y, "~")
frmla <- as.formula(paste(lhs, rhs))
# get residuals from linear model of X given Z
R1 <- lm(frmla, data = data)$residual
lhs <- paste(covarLeftOut, "~")
frmla <- as.formula(paste(lhs, rhs))
# get residuals from linear model of Y given Z
R2 <- lm(frmla, data = data)$residual
crntPcor[j] <- cor(R1,R2)
}
partialCors[[i]] <- append(crntPcor, 1 , i-1)
}
partialCorMat <- matrix(unlist(partialCors),
ncol = length(column_name),
nrow = length(column_name),
dimnames = list(column_name, column_name))
iR<-partialCorMat
ns=3
par(mfrow=c(1,1),mar=c(0,1,2,1))
diag(iR)=rep(NA,ns)
image(1:ns,1:ns,iR,col=c("yellow","goldenrod1","pink2"),
breaks=c(0,.25,.5,.75),xlab="",ylab="",axes=F)
axis(side=1,at=1:ns,labels=column_name,font=2)
axis(side=2,at=1:ns,labels=column_name,srt=90,font=2)
axis(side=3,at=1:ns,labels=column_name,font=2)
axis(side=4,at=1:ns,labels=column_name,font=2)
for(i in 1:ns)
text(rep(i,ns),1:ns,round(iR[i,],2),font=2)
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
install.packages('rjags')
library(rjags)
library(rjags)
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(rjags)
chosen_door/length(doors)
doors = c(1, 2, 3, 4)
chosen_door = 2
chosen_door/length(doors)
doors = c(1, 2, 3, 4)
chosen_door = c(2)
chosen_door/length(doors)
length(chosen_door)/length(doors)
doors = c(1, 2, 3, 4)
chosen_door = c(2)
length(chosen_door)/length(doors)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('Goldman.csv')
data
names(data)
# i dunno which one is female so I'll assume female equals to sex = 0 for now
data_female <- subset(data, Sex==0)
# exclude columns from
data_female <- subset(data_female, select = -c(Inst, ID, Sex, Age, NOTE, Location, Element.))
head(data_female)
for (i in names(data_female))
for (j in names(data_female))
paste(i, j)
data <- read.csv('Goldman.csv')
data
names(data)
# i dunno which one is female so I'll assume female equals to sex = 0 for now
data_female <- subset(data, Sex==0)
# exclude columns from
data_female <- subset(data_female, select = -c(Inst, ID, Sex, Age, NOTE, Location, Element.))
head(data_female)
## remove cor = 1
#d <- subset(d, select = -c(AVG.FHD, GRINE.FHD))
## remove cor = -1
#d <- subset(d, select = -c(IL.LL.UL))
for (i in names(data_female))
for (j in names(data_female))
paste(print(i, j))
print('abc)
print('abc')
paste('abc', 'def)
paste('abc', 'def')
a <- c('abc')
b <- c('def')
paste(a, b)
for (i in names(data_female))
for (j in names(data_female))
paste(i, j)
print(i)
for (i in names(data_female))
for (j in names(data_female))
print(i)
for (i in names(data_female))
print(i)
for (j in names(data_female))
print(j)
names(data_female)
length(names(data_female))
n_col <- length(names(data_female))
data_female
data_female
data_female[1, ]
data_female[, 1]
data_female
data_female[,3]
data_female
print(i)
for (i in i:n_col)
print(i)
for (i in i:n_col)
print(i)
n_col <- length(names(data_female))
n_col
for (i in i:n_col) {
print(i)
}
for (i in 1:n_col) {
print(i)
}
columns <- names(data_female)
n_col <- length(columns)
n_col
data_female
data_female[,3]
for (i in 1:n_col) {
print(columns[i])
}
data <- read.csv('Goldman.csv')
data
names(data)
# i dunno which one is female so I'll assume female equals to sex = 0 for now
data_female <- subset(data, Sex==0)
# exclude columns from
data_female <- subset(data_female, select = -c(Inst, ID, Sex, Age, NOTE, Location, Element.))
head(data_female)
a <- c('abc')
b <- c('def')
names(data)
# i dunno which one is female so I'll assume female equals to sex = 0 for now
data_female <- subset(data, Sex==0)
# exclude columns from
data_female <- subset(data_female, select = -c(Inst, ID, Sex, Age, NOTE, Location, Element.))
head(data_female)
a <- c('abc')
b <- c('def')
paste(a, b)
columns <- names(data_female)
n_col <- length(columns)
n_col
columns
head(data_female, 2)
subset(data_female, Metrics)
subset(data_female, Metrics.)
subset(data_female, LFEM)
subset(data_female, c(LFEM))
head(data_female)
subset(data_female, c(RHUM))
subset(data_female, select=c(RHUM))
subset(data_female, select=c(Metrics.))
names(data)
# i dunno which one is female so I'll assume female equals to sex = 0 for now
data_female <- subset(data, Sex==0)
# exclude columns from
data_female <- subset(data_female, select = -c(Inst, ID, Sex, Age, NOTE, Location, Element., Metrics.))
head(data_female)
subset(data_female, select=c(Metrics.))
head(data_female, 2)
subset(data_female, select=c(RHUM))
head(data_female, 2)
a <- c('abc')
b <- c('def')
paste(a, b)
columns <- names(data_female)
n_col <- length(columns)
columns
n_col
data_female
for (i in 1:n_col) {
print(columns[i])
}
for (i in 1:n_col) {
for (j in 1:ncol) {
paste(columns[i], column[j])
}
}
paste(columns[i], columns[j])
for (i in 1:n_col) {
for (j in 1:ncol) {
paste(columns[i], columns[j])
}
}
head(data_female)
(colMeans(is.na(data_female)))
for (i in 1:n_col) {
for (j in 1:ncol) {
paste(columns[i], columns[j])
}
}
a <- c('abc', 'def', 'ghi')
columns <- names(a)
n_col <- length(columns)
columns
columns <- c('abc', 'def', 'ghi')
n_col <- length(columns)
columns
n_col
for (i in 1:n_col) {
for (j in 1:ncol) {
paste(columns[i], columns[j])
}
}
for (i in 1:3) {
for (j in 1:3) {
paste(columns[i], columns[j])
}
}
columns
columns[1]
columns[2]
columns[3]
for (i in 1:3) {
for (j in 1:3) {
print(i)
print(j)
paste(columns[i], columns[j])
}
}
for (i in 1:3) {
for (j in 1:3) {
print(i)
print(j)
}
}
for (i in 1:3) {
for (j in 1:3) {
if i != j:
if (i != j):
for (i in 1:3) {
for (j in 1:3) {
if (i != j):
for (i in 1:3) {
for (j in 1:3) {
if (i != j) {
print(i)
print(j)
}
}
}
for (j in 1:ncol) {
if (i != j) {
print(i)
print(j)
}
}
for (i in 1:ncol) {
for (j in 1:ncol) {
if (i != j) {
print(i)
print(j)
}
}
}
for (i in 1:ncol) {
print(i)
}
ncol
names(data)
# i dunno which one is female so I'll assume female equals to sex = 0 for now
data_female <- subset(data, Sex==0)
# exclude columns from
data_female <- subset(data_female, select = -c(Inst, ID, Sex, Age, NOTE, Location, Element., Metrics.))
head(data_female)
subset(data_female, select=c(RHUM))
subset(data_female, select=c(RHUM))
head(data_female, 2)
subset(data_female, select=c(RHUM))
columns <- names(data_female)
n_col <- length(columns)
columns
n_col
data_female
data_female[,3]
head(data_female)
(colMeans(is.na(data_female)))
if (i != j & anyNA(data_female)) {
print(i)
print(j)
}
for (i in 1:ncol) {
for (j in 1:ncol) {
if (i != j & anyNA(data_female)) {
print(i)
print(j)
}
}
}
columns <- names(data_female)
columns
subset(data_female, select=c(Derived.))
names(data)
# i dunno which one is female so I'll assume female equals to sex = 0 for now
data_female <- subset(data, Sex==0)
# exclude columns from
data_female <- subset(data_female, select = -c(Inst, ID, Sex, Age, NOTE, Location, Element., Metrics., Derived.))
subset(data_female, select=c(Derived.))
columns <- names(data_female)
columns
n_col <- length(columns)
columns
n_col
data_female
data_female[,3]
head(data_female)
# % of missing values
(colMeans(is.na(data_female)))
columns[3]
columns <- names(data_female)
n_col <- length(columns)
for (i in 1:ncol) {
for (j in 1:ncol) {
print(i)
print(j)
paste(columns[i], columns[j])
}
}
ncol(data_female)
is.na(data_female)
female=as.numeric(d[,3])
feamale
female
data
data[, 3]
data <- read.csv('Goldman.csv')
data
n1=500;n2=300;mu1=c(2,2);mu2=c(3,3.5);sd1=1.5;sd2=3;ro=-.4;ss=3
par(mfrow=c(1,1),mar=c(4,4,4,1))
Omega=matrix(c(sd1^2,sd1*sd2*ro,sd1*sd2*ro,sd2^2),2,2)
co=chol(Omega)
p1=cbind(rnorm(n1),rnorm(n1))
p1=p1%*%co+rep(1,n1)%*%t(mu1)
p2=cbind(rnorm(n2),rnorm(n2))
p2=p2%*%co+rep(1,n2)%*%t(mu2)
p12=rbind(p1,p2)
plot(p12,type="n",xlab="x",ylab="y")
points(p1[,1],p1[,2],col=2)
points(mu1[1],mu1[2],pch=3,cex=4)
points(p2[,1],p2[,2],col=3)
points(mu2[1],mu2[2],pch=3,cex=4)
readline()
